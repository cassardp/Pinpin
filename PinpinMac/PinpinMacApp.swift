//
//  PinpinMacApp.swift
//  PinpinMac
//
//  Created by Patrice on 30/09/2025.
//

import SwiftUI
import SwiftData
import UserNotifications

@main
struct PinpinMacApp: App {
    @NSApplicationDelegateAdaptor private var appDelegate: AppDelegate

    var sharedModelContainer: ModelContainer = {
        let schema = Schema([ContentItem.self, Category.self])
        let configuration = ModelConfiguration(
            schema: schema,
            groupContainer: .identifier(AppConstants.groupID),
            cloudKitDatabase: .private(AppConstants.cloudKitContainerID)
        )

        print("üì¶ Configuration SwiftData macOS:")
        print("   ‚Ä¢ App Group: \(AppConstants.groupID)")
        print("   ‚Ä¢ CloudKit Container: \(AppConstants.cloudKitContainerID)")
        print("   ‚Ä¢ CloudKit Database: .private")

        do {
            let container = try ModelContainer(for: schema, configurations: [configuration])
            print("‚úÖ ModelContainer cr√©√© avec succ√®s")
            return container
        } catch {
            fatalError("Impossible de cr√©er ModelContainer: \(error)")
        }
    }()

    init() {
        // Passer le container √† AppDelegate
        appDelegate.modelContainer = sharedModelContainer
    }

    var body: some Scene {
        // Menu Bar App (pas de fen√™tre par d√©faut)
        MenuBarExtra("Pinpin", image: "MenuBarIcon") {
            MenuBarView()
                .modelContainer(sharedModelContainer)
        }
        .menuBarExtraStyle(.window)

        // Fen√™tre optionnelle (cach√©e par d√©faut)
        WindowGroup(id: "main") {
            ContentView()
                .modelContainer(sharedModelContainer)
        }
        .defaultSize(width: 800, height: 600)
    }
}

// AppDelegate pour cacher l'ic√¥ne du Dock
class AppDelegate: NSObject, NSApplicationDelegate {
    var modelContainer: ModelContainer?

    func checkiCloudStatus() {
        // V√©rifier si iCloud est disponible
        if let ubiquityToken = FileManager.default.ubiquityIdentityToken {
            print("‚úÖ iCloud est disponible et connect√©")
            print("   Token: \(ubiquityToken)")
        } else {
            print("‚ùå iCloud n'est PAS disponible ou non connect√©")
            print("   L'utilisateur doit se connecter √† iCloud dans les R√©glages Syst√®me")
        }

        // V√©rifier l'acc√®s au container iCloud sp√©cifique
        if let containerURL = FileManager.default.url(forUbiquityContainerIdentifier: AppConstants.cloudKitContainerID) {
            print("‚úÖ Container iCloud accessible: \(containerURL.path)")
        } else {
            print("‚ùå Container iCloud NON accessible: \(AppConstants.cloudKitContainerID)")
        }
    }

    func applicationDidFinishLaunching(_ notification: Notification) {
        // Cacher l'ic√¥ne du Dock (Menu Bar App uniquement)
        NSApp.setActivationPolicy(.accessory)

        // V√©rifier le statut iCloud
        checkiCloudStatus()

        // Demander la permission pour les notifications
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound]) { granted, error in
            if granted {
                print("‚úÖ Notifications autoris√©es (macOS)")
            }
        }

        // üîß Force CloudKit sync initialization
        // Sans √ßa, le premier item ajout√© peut ne pas sync
        Task { @MainActor in
            guard let container = self.modelContainer else {
                print("‚ö†Ô∏è ModelContainer non disponible")
                return
            }

            let context = container.mainContext

            // Force un fetch pour "r√©veiller" CloudKit
            let descriptor = FetchDescriptor<ContentItem>(sortBy: [SortDescriptor(\.createdAt)])
            if let items = try? context.fetch(descriptor) {
                print("üîß CloudKit initialis√© au d√©marrage")
                print("üìä Nombre d'items charg√©s: \(items.count)")

                // Afficher les d√©tails des items pour debug
                for (index, item) in items.prefix(5).enumerated() {
                    print("   Item \(index + 1): \(item.title) - cr√©√© le \(item.createdAt)")
                }

                if items.count > 5 {
                    print("   ... et \(items.count - 5) autres items")
                }
            } else {
                print("‚ö†Ô∏è Impossible de charger les items")
            }
        }
    }
}
