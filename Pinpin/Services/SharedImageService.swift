//
//  SharedImageService.swift
//  Neeed2
//
//  Service pour g√©rer les images sauvegard√©es par l'extension de partage
//

import Foundation
import UIKit
import CoreData

class SharedImageService {
    static let shared = SharedImageService()
    
    private init() {}
    
    /// Obtenir l'URL compl√®te d'une image locale depuis le chemin relatif
    func getImageURL(from relativePath: String) -> URL? {
        guard let containerURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.misericode.pinpin") else {
            return nil
        }
        
        return containerURL.appendingPathComponent(relativePath)
    }
    
    /// V√©rifier si une image locale existe
    func imageExists(at relativePath: String) -> Bool {
        guard let imageURL = getImageURL(from: relativePath) else {
            return false
        }
        
        return FileManager.default.fileExists(atPath: imageURL.path)
    }
    
    /// Supprimer les images associ√©es √† un ContentItem
    func deleteImagesForItem(_ item: ContentItem) {
        guard let containerURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.misericode.pinpin") else {
            print("‚ùå Impossible d'acc√©der au container partag√©")
            return
        }
        
        // R√©cup√©rer les chemins des images depuis les m√©tadonn√©es
        let metadataDict = item.metadataDict
        print("üóëÔ∏è Suppression des images pour item: \(item.title ?? "Sans titre")")
        print("üìã M√©tadonn√©es disponibles: \(metadataDict.keys.sorted())")
        
        var deletedFiles = 0
        
        // Supprimer l'image principale si elle existe (cl√©: thumbnail_url)
        if let imagePath = metadataDict["thumbnail_url"] {
            let imageURL = containerURL.appendingPathComponent(imagePath)
            print("üñºÔ∏è Tentative de suppression de l'image: \(imagePath)")
            do {
                try FileManager.default.removeItem(at: imageURL)
                print("‚úÖ Image supprim√©e: \(imagePath)")
                deletedFiles += 1
            } catch {
                print("‚ùå Erreur suppression image: \(error)")
            }
        }
        
        // Supprimer l'ic√¥ne si elle existe (cl√©: icon_url)
        if let iconPath = metadataDict["icon_url"] {
            let iconURL = containerURL.appendingPathComponent(iconPath)
            print("üéØ Tentative de suppression de l'ic√¥ne: \(iconPath)")
            do {
                try FileManager.default.removeItem(at: iconURL)
                print("‚úÖ Ic√¥ne supprim√©e: \(iconPath)")
                deletedFiles += 1
            } catch {
                print("‚ùå Erreur suppression ic√¥ne: \(error)")
            }
        }
        
        print("üóëÔ∏è Suppression termin√©e: \(deletedFiles) fichier(s) supprim√©(s)")
    }
    
    /// Calculer les statistiques de stockage des images
    func getStorageStats() -> (imageCount: Int, totalSize: Int64) {
        guard let containerURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.misericode.pinpin") else {
            return (0, 0)
        }
        
        var imageCount = 0
        var totalSize: Int64 = 0
        
        // Parcourir tous les fichiers dans le dossier partag√©
        if let enumerator = FileManager.default.enumerator(at: containerURL, includingPropertiesForKeys: [.fileSizeKey], options: [.skipsHiddenFiles]) {
            for case let fileURL as URL in enumerator {
                // V√©rifier si c'est un fichier image
                let pathExtension = fileURL.pathExtension.lowercased()
                if ["jpg", "jpeg", "png", "gif", "webp"].contains(pathExtension) {
                    imageCount += 1
                    
                    // Obtenir la taille du fichier
                    if let resourceValues = try? fileURL.resourceValues(forKeys: [.fileSizeKey]),
                       let fileSize = resourceValues.fileSize {
                        totalSize += Int64(fileSize)
                    }
                }
            }
        }
        
        // Diviser par 2 car chaque item g√©n√®re 2 fichiers (image + ic√¥ne)
        // Simple et efficace ! 
        return (imageCount / 2, totalSize)
    }
    
    /// Calculer les statistiques de stockage pour des items sp√©cifiques
    func getStorageStatsForItems(_ items: [ContentItem]) -> (imageCount: Int, totalSize: Int64) {
        guard let containerURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.misericode.pinpin") else {
            return (0, 0)
        }
        
        var imageCount = 0
        var totalSize: Int64 = 0
        
        // Collecter uniquement les chemins des images principales (pas les ic√¥nes)
        var imagePaths: Set<String> = []
        
        for item in items {
            let metadataDict = item.metadataDict
            
            // Ajouter SEULEMENT l'image principale (exclure les ic√¥nes)
            if let imagePath = metadataDict["thumbnail_url"] {
                imagePaths.insert(imagePath)
            }
            
            // Note: on n'ajoute plus icon_url pour exclure les ic√¥nes du comptage
        }
        
        // Calculer la taille de chaque image principale unique
        for imagePath in imagePaths {
            let imageURL = containerURL.appendingPathComponent(imagePath)
            
            if FileManager.default.fileExists(atPath: imageURL.path) {
                imageCount += 1
                
                // Obtenir la taille du fichier
                if let resourceValues = try? imageURL.resourceValues(forKeys: [.fileSizeKey]),
                   let fileSize = resourceValues.fileSize {
                    totalSize += Int64(fileSize)
                }
            }
        }
        
        return (imageCount, totalSize)
    }
    
    /// Formater la taille en bytes vers une cha√Æne lisible (KB, MB, etc.)
    func formatFileSize(_ bytes: Int64) -> String {
        let formatter = ByteCountFormatter()
        formatter.allowedUnits = [.useKB, .useMB, .useGB]
        formatter.countStyle = .file
        
        // Obtenir la cha√Æne format√©e
        let formattedString = formatter.string(fromByteCount: bytes)
        
        // Remplacer la virgule par un point pour le s√©parateur d√©cimal
        return formattedString.replacingOccurrences(of: ",", with: ".")
    }
}
