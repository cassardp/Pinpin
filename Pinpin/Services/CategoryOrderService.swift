//
//  CategoryOrderService.swift
//  Pinpin
//
//  Service pour g√©rer l'ordre personnalis√© des cat√©gories dans le FilterMenu
//

import Foundation
import Combine

class CategoryOrderService: ObservableObject {
    static let shared = CategoryOrderService()
    
    private let userDefaults: UserDefaults
    private let categoryOrderKey = AppConstants.categoryOrderKey
    
    @Published var categoryOrder: [String] = []
    
    private init() {
        userDefaults = .standard
        loadCategoryOrder()
    }

    /// Charge l'ordre des cat√©gories depuis UserDefaults avec nettoyage anti-doublons
    private func loadCategoryOrder() {
        let rawOrder = userDefaults.stringArray(forKey: categoryOrderKey) ?? []
        
        // Nettoyer imm√©diatement les doublons au chargement
        let cleanOrder = Array(NSOrderedSet(array: rawOrder)) as! [String]
        
        // Si des doublons ont √©t√© trouv√©s, sauvegarder la version nettoy√©e
        if cleanOrder.count != rawOrder.count {
            print("üßπ Nettoyage des doublons dans CategoryOrderService: \(rawOrder.count) ‚Üí \(cleanOrder.count)")
            categoryOrder = cleanOrder
            saveCategoryOrder()
        } else {
            categoryOrder = cleanOrder
        }
    }
    
    /// Sauvegarde l'ordre des cat√©gories dans UserDefaults
    private func saveCategoryOrder() {
        userDefaults.set(categoryOrder, forKey: categoryOrderKey)
    }
    
    /// Applique l'ordre personnalis√© aux cat√©gories disponibles avec blindage anti-doublons
    /// Les nouvelles cat√©gories sont ajout√©es √† la fin
    func orderedCategories(from availableCategories: [String]) -> [String] {
        // 1. Nettoyer les cat√©gories disponibles des doublons potentiels
        let cleanAvailableCategories = Array(Set(availableCategories))
        
        // 2. Nettoyer l'ordre sauvegard√© des doublons
        let cleanSavedOrder = Array(NSOrderedSet(array: categoryOrder)) as! [String]
        
        // 3. Construire la liste finale sans doublons
        var orderedList: [String] = []
        var processedCategories = Set<String>()
        
        // Ajouter les cat√©gories dans l'ordre sauvegard√© si elles existent encore
        for category in cleanSavedOrder {
            if cleanAvailableCategories.contains(category) && !processedCategories.contains(category) {
                orderedList.append(category)
                processedCategories.insert(category)
            }
        }
        
        // Ajouter les nouvelles cat√©gories √† la fin (sans doublons)
        for category in cleanAvailableCategories {
            if !processedCategories.contains(category) {
                orderedList.append(category)
                processedCategories.insert(category)
            }
        }
        
        // 4. V√©rification finale : s'assurer qu'il n'y a aucun doublon
        let finalOrderedList = Array(NSOrderedSet(array: orderedList)) as! [String]
        
        // Mettre √† jour l'ordre sauvegard√© si n√©cessaire (avec nettoyage)
        if finalOrderedList != cleanSavedOrder {
            DispatchQueue.main.async {
                self.categoryOrder = finalOrderedList
                self.saveCategoryOrder()
            }
        }
        
        return finalOrderedList
    }
    
    /// R√©organise les cat√©gories (utilis√© par le glisser-d√©poser) avec blindage anti-doublons
    func reorderCategories(from source: IndexSet, to destination: Int) {
        // Nettoyer avant la r√©organisation
        let cleanOrder = Array(NSOrderedSet(array: categoryOrder)) as! [String]
        categoryOrder = cleanOrder
        
        // Effectuer la r√©organisation
        categoryOrder.move(fromOffsets: source, toOffset: destination)
        
        // Nettoyer apr√®s la r√©organisation (s√©curit√© suppl√©mentaire)
        let finalOrder = Array(NSOrderedSet(array: categoryOrder)) as! [String]
        categoryOrder = finalOrder
        
        saveCategoryOrder()
    }
    
    /// Met √† jour l'ordre complet des cat√©gories avec nettoyage anti-doublons
    func updateCategoryOrder(_ newOrder: [String]) {
        // Nettoyer les doublons avant sauvegarde
        let cleanOrder = Array(NSOrderedSet(array: newOrder)) as! [String]
        categoryOrder = cleanOrder
        saveCategoryOrder()
    }

    /// Renomme une cat√©gorie dans l'ordre stock√©
    func renameCategory(oldName: String, newName: String) {
        guard let index = categoryOrder.firstIndex(of: oldName) else { return }
        categoryOrder[index] = newName
        saveCategoryOrder()
    }

    /// Supprime une cat√©gorie de l'ordre stock√©
    func removeCategory(named name: String) {
        guard let index = categoryOrder.firstIndex(of: name) else { return }
        categoryOrder.remove(at: index)
        saveCategoryOrder()
    }
    
    // MARK: - Diagnostic et nettoyage
    
    /// Diagnostique et nettoie les doublons dans UserDefaults
    func cleanupDuplicates() {
        let originalCount = categoryOrder.count
        let cleanOrder = Array(NSOrderedSet(array: categoryOrder)) as! [String]
        
        if cleanOrder.count != originalCount {
            print("üßπ Nettoyage forc√© des doublons: \(originalCount) ‚Üí \(cleanOrder.count)")
            categoryOrder = cleanOrder
            saveCategoryOrder()
        }
    }
    
    /// V√©rifie s'il y a des doublons dans l'ordre actuel
    func hasDuplicates() -> Bool {
        return categoryOrder.count != Set(categoryOrder).count
    }
    
    /// Retourne les cat√©gories dupliqu√©es
    func getDuplicates() -> [String] {
        var seen = Set<String>()
        var duplicates = Set<String>()
        
        for category in categoryOrder {
            if !seen.insert(category).inserted {
                duplicates.insert(category)
            }
        }
        
        return Array(duplicates)
    }
}
