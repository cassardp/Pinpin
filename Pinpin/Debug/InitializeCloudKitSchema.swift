//
//  InitializeCloudKitSchema.swift
//  Pinpin
//
//  Script pour initialiser le sch√©ma CloudKit avec les bonnes REFERENCE
//  √Ä ex√©cuter UNE SEULE FOIS en Development apr√®s reset du sch√©ma
//

import Foundation
import SwiftData
import CoreData

#if DEBUG
/// Initialise le sch√©ma CloudKit avec les relations correctes (REFERENCE)
func initializeCloudKitSchema() {
    print("üîß Initialisation du sch√©ma CloudKit...")
    
    let config = ModelConfiguration()
    
    do {
        try autoreleasepool {
            let desc = NSPersistentStoreDescription(url: config.url)
            
            // Configuration CloudKit
            let options = NSPersistentCloudKitContainerOptions(
                containerIdentifier: "iCloud.com.misericode.Pinpin"
            )
            desc.cloudKitContainerOptions = options
            desc.shouldAddStoreAsynchronously = false
            
            // Conversion SwiftData ‚Üí Core Data
            if let mom = NSManagedObjectModel.makeManagedObjectModel(
                for: [Category.self, ContentItem.self, UserPreferencesModel.self]
            ) {
                let container = NSPersistentCloudKitContainer(
                    name: "Pinpin",
                    managedObjectModel: mom
                )
                container.persistentStoreDescriptions = [desc]
                
                // Chargement du store
                container.loadPersistentStores { _, error in
                    if let error {
                        print("‚ùå Erreur de chargement: \(error.localizedDescription)")
                        return
                    }
                }
                
                // üéØ INITIALISATION DU SCH√âMA CLOUDKIT
                print("üì§ Cr√©ation du sch√©ma CloudKit...")
                try container.initializeCloudKitSchema()
                print("‚úÖ Sch√©ma CloudKit initialis√© avec succ√®s!")
                print("   ‚Üí CD_category est maintenant de type REFERENCE")
                print("   ‚Üí V√©rifie dans CloudKit Dashboard")
                
                // Nettoyage
                if let store = container.persistentStoreCoordinator.persistentStores.first {
                    try container.persistentStoreCoordinator.remove(store)
                }
            } else {
                print("‚ùå Impossible de cr√©er le NSManagedObjectModel")
            }
        }
    } catch {
        print("‚ùå Erreur: \(error.localizedDescription)")
    }
}
#endif
